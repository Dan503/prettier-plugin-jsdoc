// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`description contain paragraph 1`] = `
"/**
 * Does the following things:
 *
 * 1. Thing 1
 * 2. Thing 2
 * 3. Thing 3
 */
"
`;

exports[`description contain paragraph 2`] = `
"/**
 * Does the following things:
 *
 * 1. Thing 1
 * 2. Thing 2
 * 3. Thing 3
 */
"
`;

exports[`description contain paragraph 3`] = `
"class test {
  /**
   * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
   * tempor incididunt ut labore et dolore magna aliqua.
   *
   * Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi
   * ut aliquip ex ea commodo consequat. Duis aute irure dolor in
   * reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa
   * qui officia deserunt mollit anim id est laborum.
   *
   * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
   * tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
   * commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
   * velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
   * occaecat cupidatat non proident, sunt in culpa qui officia deserunt
   * mollit anim id est laborum.
   * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
   * tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
   * commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
   * velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
   * occaecat cupidatat non proident, sunt in culpa qui officia deserunt
   * mollit anim id est laborum.
   */
  a() {}
}
"
`;

exports[`description contain paragraph 4`] = `
"/**
 * Transforms data
 *
 * @override
 */

/**
 * Bounce give a renderContent and show that around children when isVisible is true
 *
 * @example
 *   <Bounce
 *     isVisible={isVisible}
 *     dismiss={() => setVisible(false)}
 *     renderContent={() => {
 *       return <InsideOfPopeUp />;
 *     }}
 *   >
 *     <Button />
 *   </Bounce>;
 *
 * @type {React.FC<BounceProps>}
 */
"
`;

exports[`description new line with dash 1`] = `
"/**
 * We will allow the scroll view to give up its lock iff it acquired the lock
 * during an animation. This is a very useful default that happens to satisfy
 * many common user experiences.
 *
 * - Stop a scroll on the left edge, then turn that into an outer view's backswipe.
 * - Stop a scroll mid-bounce at the top, continue pulling to have the outer view dismiss.
 * - However, without catching the scroll view mid-bounce (while it is
 *   motionless), if you drag far enough for the scroll view to become
 *   responder (and therefore drag the scroll view a bit), any backswipe
 *   navigation of a swipe gesture higher in the view hierarchy, should be rejected.
 */
function scrollResponderHandleTerminationRequest() {
  return !this.state.observedScrollSinceBecomingResponder;
}

/**
 * - Stop a scroll on the left edge, then turn that into an outer view's backswipe.
 * - Stop a scroll mid-bounce at the top, continue pulling to have the outer view dismiss.
 */
function scrollResponderHandleTerminationRequest() {
  return !this.state.observedScrollSinceBecomingResponder;
}

/**
 * - Stop a scroll on the left edge, then turn that into an outer view's backswipe.
 * - Stop a scroll mid-bounce at the top, continue pulling to have the outer view dismiss.
 */
function scrollResponderHandleTerminationRequest() {
  return !this.state.observedScrollSinceBecomingResponder;
}
"
`;

exports[`numbers and code in description 1`] = `
"/**
 * =========================== PressResponder Tutorial ===========================
 *
 * The \`PressResponder\` class helps you create press interactions by analyzing
 * the geometry of elements and observing when another responder (e.g.
 * ScrollView) has stolen the touch lock. It offers hooks for your component to
 * provide interaction feedback to the user:
 *
 * - When a press has activated (e.g. highlight an element)
 * - When a press has deactivated (e.g. un-highlight an element)
 * - When a press sould trigger an action, meaning it activated and deactivated
 *   while within the geometry of the element without the lock being stolen.
 *
 * A high quality interaction isn't as simple as you might think. There should
 * be a slight delay before activation. Moving your finger beyond an element's
 * bounds should trigger deactivation, but moving the same finger back within
 * an element's bounds should trigger reactivation.
 *
 * 1.  In order to use \`PressResponder\`, do the following:
 *
 *     Const pressResponder = new PressResponder(config);
 *
 * 2.  Choose the rendered component who should collect the press events. On that
 *     element, spread \`pressability.getEventHandlers()\` into its props.
 *
 *         Return (
 *         <View {...this.state.pressResponder.getEventHandlers()} />
 *         );
 *
 * 3.  Reset \`PressResponder\` when your component unmounts.
 *
 *     ComponentWillUnmount() {
 *     this.state.pressResponder.reset();
 *     }
 *
 * ==================== Implementation Details ====================
 *
 * \`PressResponder\` only assumes that there exists a \`HitRect\` node. The
 * \`PressRect\` is an abstract box that is extended beyond the \`HitRect\`.
 *
 * # Geometry
 *
 * When the press is released outside the \`HitRect\`, the responder is NOT
 * eligible for a \\"press\\".
 */
"
`;

exports[`numbers and code in description 2`] = `
"/**
 * 1. a keydown event occurred immediately before a focus event
 * 2. a focus event happened on an element which requires keyboard interaction
 *    (e.g., a text field);
 */
"
`;

exports[`numbers and code in description 3`] = `
"/**
 * The script uses two heuristics to determine whether the keyboard is being used:
 *
 * 1. a keydown event occurred lorem ipsum dolor sit amet, consectetur
 *    adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna
 *    aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
 *    nisi ut aliqimmediately before a focus event;
 * 2. a focus evenlorem ipsum dolor sit amet, consectetur adipiscing elit, sed
 *    do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
 *    minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqt
 *    happened on an element which requires keyboard interaction (e.g., a text field);
 *
 * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
 * tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
 * quis nostrud exercitation ullamco laboris nisi ut aliq W3C Software Notice
 * and License: https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 */
"
`;
